#!/usr/bin/env node

/**
 * # postmaker CLI
 *
 * Command-line interface for generating articles. This is the
 * "canonical implementation" of the Postmaker library, and as such
 * performs all parameter parsing on its own.
 *
 * ## Usage
 *
 * Generate an article with the following syntax:
 *
 *    postmaker "ARTICLE NAME" [OPTIONS]
 *
 * ## Options
 *
 * The following options can be passed to the CLI:
 *
 *    -t tag1,tag2 # Adds tags to the article for organization
 *    -c category  # Adds a category to the article
 *    -p ./_posts  # Tells `postmaker` where to generate the article.
 *                 # By default, this will be the current path
 *
 * ## Configuration
 *
 * You can set up configuration using an RC file named `.postmakerc`
 * located in the current dir, and crawls up to the top-level if it
 * cannot find one. If none can be found, it will look for a file at
 * one of the following paths:
 *
 * - ~/.postmakerc
 * - ~/.config/postmakerc
 * - ~/.config/postmakerc/config
 * - /etc/postmakerc
 * - /etc/postmakerc/config
 *
 * You can also pass a `--config` option with a path to the rc file.
 */

const { argv } = require("optimist"),
      rc = require("rc"),
      postmaker = require("../lib"),
      _ = require("lodash"),
      // Configurable defaults
      defaults = rc("postmake", {
        category: "gbs",
        tags: [],
        path: process.cwd()
      }),
      // Command-line options
      options = {
        category: argv.c,
        tags: argv.t,
        path: argv.p
      },
      // Method arguments
      name = argv._[0],
      category = options.category || defaults.category,
      path = options.path || defaults.path,
      tags = options.tags || defaults.tags

// Throw an error if no arguments are given
if (_.isEmpty(name)) {
  console.log("Usage: postmaker NAME [OPTIONS]")
  process.exit(1)
}

// Generate the article
postmaker.generate({
  category: category,
  name: name,
  path: path,
  tags: tags
})
